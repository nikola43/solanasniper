const { Connection, PublicKey } = require("@solana/web3.js");

const RAYDIUM_PUBLIC_KEY = "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8";

const SESSION_HASH = 'QNDEMO' + Math.ceil(Math.random() * 1e9); // Random unique identifier for your session
let credits = 0;

const raydium = new PublicKey(RAYDIUM_PUBLIC_KEY);

const HTTP_URL = "https://broken-wispy-borough.solana-mainnet.quiknode.pro/7c1eeffbf6f3531067b2a0fafdc673d5edc23e73/";
const WS_URL = "wss://broken-wispy-borough.solana-mainnet.quiknode.pro/7c1eeffbf6f3531067b2a0fafdc673d5edc23e73/";

const connection = new Connection(HTTP_URL, {
    wsEndpoint: WS_URL,
    httpHeaders: { "x-session-hash": SESSION_HASH }
});

// Monitor logs
async function main(connection, programAddress) {
    console.log("Monitoring logs for program:", programAddress.toString());
    connection.onLogs(
        programAddress,
        ({ logs, err, signature }) => {
            if (err) return;
            //console.log(logs[0]);

            /*
            for (let log of logs) {
                if (log.includes("InitializeAccount")) {
                    console.log("Signature for 'InitializeAccount':", signature);
                }
            }
            */
            if (logs && logs.length > 0) {
                console.log("new log", new Date());
                if (logs.some(log => log.includes("initialize2"))) {
                    console.log("Signature for 'initialize2':", signature);
                    fetchRaydiumAccounts(signature, connection).then((tokens) => {
                        const tokenAAccount = tokens.tokenAAccount;
                        const tokenBAccount = tokens.tokenBAccount;
                        console.log("Token A Account:", tokenAAccount.toBase58());
                        console.log("Token B Account:", tokenBAccount.toBase58());
                    })
                }
            }


            
        },
        "finalized"
    );
}

// Parse transaction and filter data
async function fetchRaydiumAccounts(txId, connection) {
    const tx = await connection.getParsedTransaction(
        txId,
        {
            maxSupportedTransactionVersion: 0,
            commitment: 'confirmed'
        });

    credits += 100;

    const accounts = tx?.transaction.message.instructions.find(ix => ix.programId.toBase58() === RAYDIUM_PUBLIC_KEY).accounts;

    if (!accounts) {
        console.log("No accounts found in the transaction.");
        return;
    }

    const tokenAIndex = 8;
    const tokenBIndex = 9;

    const tokenAAccount = accounts[tokenAIndex];
    const tokenBAccount = accounts[tokenBIndex];

    const displayData = [
        { "Token": "A", "Account Public Key": tokenAAccount.toBase58() },
        { "Token": "B", "Account Public Key": tokenBAccount.toBase58() }
    ];
    console.log("New LP Found");
    console.log(generateExplorerUrl(txId));
    console.table(displayData);
    console.log("Total QuickNode Credits Used in this session:", credits);

    return { tokenAAccount, tokenBAccount };
}

function generateExplorerUrl(txId) {
    return `https://solscan.io/tx/${txId}`;
}

main(connection, raydium).catch(console.error);